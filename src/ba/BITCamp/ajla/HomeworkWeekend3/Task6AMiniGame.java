package ba.BITCamp.ajla.HomeworkWeekend3;

import java.util.Arrays;
import java.util.Scanner;

public class Task6AMiniGame {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		// fill array with random values from 1 to 4
		int[] arr = returnArrayFilledWithRandomValues();
		System.out.println(Arrays.toString(arr));
		// setting timer for the game
		long start = System.currentTimeMillis();

		System.out
				.println("Let's play a game! You have to bring all numbers to zero. \nChoose the index of the array. Number on that index will be \ndecreased by one, and all other will be increased or decresed \nby index, depend on does number on choosen index even or odd.");
		
		// User will keep entering index of array until all members become zeros
		while (!doesArrayContainsOnlyZeros(arr)) {
			System.out.println("Enter the index");
			int index = input.nextInt();
			try {
				arr = changeArrayValues(arr, index);
			} catch (ArrayIndexOutOfBoundsException e) {
				input.nextLine();
				System.out.println("Index mast be in range 0 - 4. Try again.");
			}
			System.out.println(Arrays.toString(arr));
		}

		// calculate how long it took user to finish the game
		long end = System.currentTimeMillis() - start;
		System.out.println("Congratulations! You saccessfully finished game in " + end / 1000 + " seconds.");
		input.close();
	}

	/**
	 * Fills an array with random numbers from 1 to 4
	 * <p>
	 * Array contains 5 members, randomly generated by this function.
	 * @return an array of ints
	 */
	public static int[] returnArrayFilledWithRandomValues() {
		int[] arr = new int[5];
		for (int i = 0; i < 5; i++) {
			arr[i] = (int) (Math.random() * 4 + 1);
		}
		return arr;
	}

	/**
	 * Checks if all array members are zeros
	 * @param arr - array of ints
	 * @return true if all members are zeros, and false if they are not
	 */
	public static boolean doesArrayContainsOnlyZeros(int[] arr) {
		for (int i : arr) {
			if (i != 0) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Simulate mini game. Target is to get all array members to zero.
	 * <p>
	 * depending on forwarded index, this method increase all another members for value of index, if value on indexed place is even, and
	 * decrease all another members  for value of index, if value of indexed place was odd. Value on indexed place will be always decreased 
	 * by one. If valu on indexed place is zero, nothing will happen. Values cannot be smaller than 0 or larger then 4.
	 * @param arr - array of ints
	 * @param index - index of array, must be positive number, and must be in range from 0 to 4
	 * @return array of ints that represents reduced array, it should be filled with all zeros
	 * @exception ArrayIndexOutOfBoundsException - if index is larger then for or smaller then 0
	 */
	public static int[] changeArrayValues(int[] arr, int index) {
		// checking if index is put of range and throwing exception
		if (index > 4 || index < 0) {
			throw new ArrayIndexOutOfBoundsException();
		}
		int l = arr.length;
		int temp = 0;
		// checking if value on indexed place is different then zero
		if (arr[index] != 0) {
			// checking if value on indexed place is even number
			// if it is, we need to increase all members, but indexed one, for index
			// and decrease indexed value for 1
			if (arr[index] % 2 == 0) {
				for (int i = index + 1; i < l; i++) {
					temp = arr[i] + index;
					if (temp > 4) {
						arr[i] = 4;
					} else {
						arr[i] = temp;
					}
				}
				for (int i = index - 1; i >= 0; i--) {
					temp = arr[i] + index;
					if (temp > 4) {
						arr[i] = 4;
					} else {
						arr[i] = temp;
					}
				}
				arr[index]--;
			} else {
				// and if value on indexed place is odd number
				// we need to decrease all members, but indexed one, for index
				// and decrease indexed value for 1
				for (int i = index + 1; i < l; i++) {
					temp = arr[i] - index;
					if (temp < 0) {
						arr[i] = 0;
					} else {
						arr[i] = temp;
					}
				}
				for (int i = index - 1; i >= 0; i--) {
					temp = arr[i] - index;
					if (temp < 0) {
						arr[i] = 0;
					} else {
						arr[i] = temp;
					}
				}
				arr[index]--;
			}
		}
		return arr;
	}
}
